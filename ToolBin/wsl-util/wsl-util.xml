<?xml version="1.0"?>
<doc>
    <assembly>
        <name>wsl-util</name>
    </assembly>
    <members>
        <member name="T:WslUtil.CommandAttribute">
            <summary>
            Used to tag an <see cref="T:WslUtil.ICommand"/> for automatic inclusion in a program.
            </summary>
        </member>
        <member name="M:WslUtil.CommandAttribute.#ctor(System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="disabled">
            Optionally disables the command, preventing it fromm being
            recognized by the program.
            </param>
        </member>
        <member name="P:WslUtil.CommandAttribute.Disabled">
            <summary>
            Indicates when the command is disabled.
            </summary>
        </member>
        <member name="T:WslUtil.CommandBase">
            <summary>
            An abstract class that has default implementations for selected 
            <see cref="T:WslUtil.ICommand"/> members.
            </summary>
        </member>
        <member name="P:WslUtil.CommandBase.Words">
            <inheritdoc/>
        </member>
        <member name="P:WslUtil.CommandBase.AltWords">
            <inheritdoc/>
        </member>
        <member name="P:WslUtil.CommandBase.ExtendedOptions">
            <inheritdoc/>
        </member>
        <member name="P:WslUtil.CommandBase.CheckOptions">
            <summary>
            Indicates that command options should be checked against <see cref="P:WslUtil.CommandBase.ExtendedOptions"/>.
            This defaults to <c>true</c>.
            </summary>
        </member>
        <member name="M:WslUtil.CommandBase.NeedsSshCredentials(Neon.Common.CommandLine)">
            <inheritdoc/>
        </member>
        <member name="P:WslUtil.CommandBase.SplitItem">
            <inheritdoc/>
        </member>
        <member name="M:WslUtil.CommandBase.Help">
            <inheritdoc/>
        </member>
        <member name="M:WslUtil.CommandBase.RunAsync(Neon.Common.CommandLine)">
            <inheritdoc/>
        </member>
        <member name="T:WslUtil.GccCommand">
            <summary>
            Implements the <b>gcc</b> command.
            </summary>
        </member>
        <member name="P:WslUtil.GccCommand.Words">
            <inheritdoc/>
        </member>
        <member name="M:WslUtil.GccCommand.Help">
            <inheritdoc/>
        </member>
        <member name="M:WslUtil.GccCommand.RunAsync(Neon.Common.CommandLine)">
            <inheritdoc/>
        </member>
        <member name="T:WslUtil.ICommand">
            <summary>
            Implements a command.
            </summary>
        </member>
        <member name="P:WslUtil.ICommand.Words">
            <summary>
            Returns the command words.
            </summary>
            <remarks>
            This property is used to map the command line arguments to a command
            implemention.  In the simple case, this will be a single word.  You 
            may also specify multiple words.
            </remarks>
        </member>
        <member name="P:WslUtil.ICommand.AltWords">
            <summary>
            Returns optional alternative command words like: "ls" for "list", or "rm" for "remove".
            </summary>
            <remarks>
            <note>
            This should return <c>null</c> if there are no alternate words and if there
            is an alternate, the number of words must be the same as returned be <see cref="P:WslUtil.ICommand.Words"/>
            for the command.
            </note>
            </remarks>
        </member>
        <member name="P:WslUtil.ICommand.ExtendedOptions">
            <summary>
            Returns the array of extended command line options beyond the common options
            supported by the command or an empty array if none.  The option names must
            include the leading dash(es).
            </summary>
        </member>
        <member name="P:WslUtil.ICommand.CheckOptions">
            <summary>
            Indicates that command options should be checked against <see cref="P:WslUtil.ICommand.ExtendedOptions"/>.
            </summary>
        </member>
        <member name="M:WslUtil.ICommand.NeedsSshCredentials(Neon.Common.CommandLine)">
            <summary>
            Returns <c>true</c> if the command requires server SSH credentials to be
            specified on the command line via the <b>-u/--user</b> and <b>-p/--password</b>
            options vs. obtaining them from the currently logged in cluster secrets or
            not needing credentials at all.
            </summary>
            <param name="commandLine">The command line.</param>
        </member>
        <member name="P:WslUtil.ICommand.SplitItem">
            <summary>
            Returns the item used to split a command line into two parts with
            the left part having standard <b>neon-cli</b> options and the right
            part being a command that will be executed remotely.  This returns as
            <c>null</c> for commands that don't split.
            </summary>
        </member>
        <member name="M:WslUtil.ICommand.Help">
            <summary>
            Displays help for the command.
            </summary>
        </member>
        <member name="M:WslUtil.ICommand.RunAsync(Neon.Common.CommandLine)">
            <summary>
            Runs the command.
            </summary>
            <param name="commandLine">The command line.</param>
        </member>
        <member name="T:WslUtil.RunCommand">
            <summary>
            Implements the <b>run</b> command.
            </summary>
        </member>
        <member name="P:WslUtil.RunCommand.Words">
            <inheritdoc/>
        </member>
        <member name="M:WslUtil.RunCommand.Help">
            <inheritdoc/>
        </member>
        <member name="M:WslUtil.RunCommand.RunAsync(Neon.Common.CommandLine)">
            <inheritdoc/>
        </member>
        <member name="T:WslUtil.VersionCommand">
            <summary>
            Implements the <b>version</b> command.
            </summary>
        </member>
        <member name="P:WslUtil.VersionCommand.Words">
            <inheritdoc/>
        </member>
        <member name="P:WslUtil.VersionCommand.ExtendedOptions">
            <inheritdoc/>
        </member>
        <member name="M:WslUtil.VersionCommand.Help">
            <inheritdoc/>
        </member>
        <member name="M:WslUtil.VersionCommand.RunAsync(Neon.Common.CommandLine)">
            <inheritdoc/>
        </member>
        <member name="T:WslUtil.Program">
            <summary>
            This tool provides various handy WSL2 utilities.
            </summary>
        </member>
        <member name="F:WslUtil.Program.Name">
            <summary>
            The program name.
            </summary>
        </member>
        <member name="F:WslUtil.Program.Version">
            <summary>
            The program version.
            </summary>
        </member>
        <member name="P:WslUtil.Program.CommandLine">
            <summary>
            Returns the orignal program <see cref="P:WslUtil.Program.CommandLine"/>.
            </summary>
        </member>
        <member name="M:WslUtil.Program.Main(System.String[])">
            <summary>
            Main entry point.
            </summary>
            <param name="args">Command line arguments.</param>
        </member>
        <member name="M:WslUtil.Program.Exit(System.Int32)">
            <summary>
            Exits the program returning the specified process exit code.
            </summary>
            <param name="exitCode">The exit code.</param>
        </member>
        <member name="P:WslUtil.Program.GitVersion">
            <summary>
            Returns the program version as the Git branch and commit and an optional
            indication of whether the program was build from a dirty branch.
            </summary>
        </member>
        <member name="M:WslUtil.Program.GetCommand(Neon.Common.CommandLine,System.Collections.Generic.List{WslUtil.ICommand})">
            <summary>
            Attempts to match the command line to the <see cref="T:WslUtil.ICommand"/> to be used
            to implement the command.
            </summary>
            <param name="commandLine">The command line.</param>
            <param name="commands">The commands.</param>
            <returns>The command instance or <c>null</c>.</returns>
        </member>
    </members>
</doc>
