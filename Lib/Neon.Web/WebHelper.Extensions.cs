//-----------------------------------------------------------------------------
// FILE:        WebHelper.Extensions.cs
// CONTRIBUTOR: Jeff Lill
// COPYRIGHT:   Copyright Â© 2005-2023 by NEONFORGE LLC.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

using System;
using System.Diagnostics.Contracts;
using System.IO;
using System.Linq;
using System.Net;
using System.Runtime.CompilerServices;
using System.Threading;

using Microsoft.AspNetCore;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Controllers;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.DependencyInjection.Extensions;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;

using Neon.Common;
using Neon.Data;
using Neon.Diagnostics;
using Neon.Net;

namespace Neon.Web
{
    /// <summary>
    /// Misc ASP.NET related helper methods.
    /// </summary>
    public static partial class WebHelper
    {
        //---------------------------------------------------------------------
        // [Microsoft.AspNetCore.Http.HttpRequest] extensions.

        /// <summary>
        /// Returns the full URI for an <see cref="HttpRequest"/> (not including the port number).
        /// </summary>
        /// <param name="request">The request.</param>
        /// <returns>The fully qualified URI including any query parameters.</returns>
        public static string GetUri(this HttpRequest request)
        {
            return $"{request.Scheme}://{request.Host}{request.Path}{request.QueryString}";
        }

        //---------------------------------------------------------------------
        // [IMvcBuilder] extensions

        /// <summary>
        /// <para>
        /// Performs Neon related initialization including adding the the <see cref="RoundTripJsonInputFormatter"/>,
        /// <see cref="RoundTripJsonOutputFormatter"/> and <b>Newtonsoft JSON</b> formatters to the
        /// request pipeline.  These handle serialization and deserailzation of JSON text submitted to and
        /// returned from web services and classes generated by <b>Neon.ModelGen</b> implementing 
        /// <see cref="IRoundtripData"/> as well as many basic .NET types.
        /// </para>
        /// <para>
        /// By default, this also adds an exception filter to the ASP.NET middleware that logs any uncaught
        /// exceptions and handles exception response formatting.
        /// </para>
        /// </summary>
        /// <param name="builder">The MVC builder.</param>
        /// <param name="disableRoundTripFormatters">Optionally disable adding the round-trip formatters.</param>
        /// <param name="allowRoundtripFormatter">
        /// Optional lamda function that can be used to customize which types allowed
        /// to be handled by the custom round-trip formatters.  When this is <c>null</c>, 
        /// all types will be handled by the formatters, otherwise only those types
        /// where this function returns <c>true</c> will be handled by the custom formatters.
        /// Other types will be passed on to the remaining formatters.
        /// </param>
        /// <param name="disableExceptionFilter">Optionally disables the addition of the built-in exception filter middleware (see remarks).</param>
        /// <returns>The <paramref name="builder"/>.</returns>
        /// <remarks>
        /// <para>
        /// This provides both backwards and forwards data compatibility on both the client and service
        /// side by retaining object properties that one side or the other doesn't know about.  This enables
        /// scenarios where new properties are added to a data object but the solution components aren't
        /// all upgraded at the same time as a monolithic app.
        /// </para>
        /// <para>
        /// By default, this method adds a an exception filter to the MVC middleware pipeline.  This
        /// filter handles <see cref="ArgumentException"/>, <see cref="ArgumentNullException"/>, and
        /// <see cref="HttpApiException"/> exceptions by having ASP.NET return a <see cref="HttpStatusCode.BadRequest"/>
        /// for the argument exceptions and the status code and error code (reason phrase) from the
        /// <see cref="HttpApiException"/>.
        /// </para>
        /// <para>
        /// This combined with the <see cref="NeonController.Requires(bool, string, string, HttpStatusCode)"/>,
        /// <see cref="NeonController.Requires(Func{bool}, string, string, HttpStatusCode)"/>, 
        /// <see cref="NeonControllerBase.Requires(bool, string, string, HttpStatusCode)"/> and
        /// <see cref="NeonControllerBase.Requires(Func{bool}, string, string, HttpStatusCode)"/>
        /// methods help make it easier for REST methods to check input parameters as well as
        /// transmit additional details back to the calling client.
        /// </para>
        /// </remarks>
        public static IMvcBuilder AddNeon(
            this IMvcBuilder    builder, 
            bool                disableRoundTripFormatters = false, 
            Func<Type, bool>    allowRoundtripFormatter    = null,
            bool                disableExceptionFilter     = false)
        {
            if (!disableRoundTripFormatters)
            {
                builder.AddMvcOptions(
                    options =>
                    {
                        options.InputFormatters.Insert(0, new RoundTripJsonInputFormatter(allowRoundtripFormatter));
                        options.OutputFormatters.Insert(0, new RoundTripJsonOutputFormatter(allowRoundtripFormatter));

                        if (!disableExceptionFilter)
                        {
                            options.Filters.Add<LoggingExceptionFilter>();
                        }
                    });
            }

            return builder;
        }
    }
}
