//-----------------------------------------------------------------------------
// FILE:        BodyStreamAttribute.cs
// CONTRIBUTOR: Jeff Lill
// COPYRIGHT:   Copyright Â© 2005-2024 by NEONFORGE LLC.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Diagnostics.Contracts;
using System.IO;
using System.Reflection;
using System.Text;

using Neon.Common;
using Neon.IO;

namespace Neon.ModelGen
{
    /// <summary>
    /// <para>
    /// Used to indicate that clients generated by <b>Neon.ModelGen</b> should
    /// include a <c>System.IO.Stream stream</c> parameter holding the data to 
    /// be included as the body of the request to the remote service.
    /// </para>
    /// <note>
    /// You may not combine <see cref="BodyStreamAttribute"/> and <see cref="FromBodyAttribute"/>
    /// attributes on the same model method.
    /// </note>
    /// <para>
    /// See the remarks for additional details.
    /// </para>
    /// </summary>
    /// <remarks>
    /// <para>
    /// Model methods tagged with the <see cref="BodyStreamAttribute"/> will be generated
    /// with <c>System.IO.Stream stream</c> as the first parameter and the generated client
    /// method will transmit bytes from the current stream position up to the end of the 
    /// stream up to the remote service.  By default, this will be accomplished using a
    /// <b>8 KiB</b> buffer but this can be customized via <see cref="BufferSize"/>.
    /// </para>
    /// <para>
    /// By default the request <b>Content-Type</b> header will be set to <b>application/octet-stream</b>.
    /// You can customize this via <see cref="ContentType"/>.
    /// </para>
    /// <para>
    /// For input streams that support <see cref="Stream.CanSeek"/> the generated method will also include
    /// the <b>Content-Length</b> header.  This will be computed by subtracting the current stream position
    /// from the stream length.
    /// </para>
    /// <note>
    /// For some situations, you may need to upload from a stream that doesn't support <see cref="Stream.CanSeek"/>
    /// but you already know how many bytes will be transmitted and the server method is expecting a 
    /// <b>Content-Length</b> header.  In this case, you can wrap your stream with a <see cref="SubStream"/>
    /// configured with the starting and ending positions of the data in the original stream and then
    /// pass the <see cref="SubStream"/> as the service client method's <c>stream</c> argument.
    /// </note>
    /// </remarks>
    [AttributeUsage(AttributeTargets.Method)]
    public class BodyStreamAttribute : Attribute
    {
        private string  contentType = "application/octet-stream";
        private int     bufferSize  = 8192;

        /// <summary>
        /// Optionally overrides the uploaded content's MIME type.  This defaults 
        /// to <b>application/octet-stream</b>.
        /// </summary>
        public string ContentType
        {
            get => contentType;

            set
            {
                Covenant.Requires<ArgumentNullException>(!string.IsNullOrEmpty(value), nameof(ContentType));
                
                contentType = value;
            }
        }

        /// <summary>
        /// Indicates that a <b>Content-Size</b> header will be included in the request,
        /// passing the size of the input stream.  This defaults to <c>false</c>.
        /// </summary>
        public bool IncludeContentSize { get; set; } = false;

        /// <summary>
        /// Optionally specifies the size of the buffer in bytes that will be used
        /// by the generated API method for uploading the source stream to the server.
        /// This defaults to <b>8 KiB</b>.
        /// </summary>
        public int BufferSize
        {
            get => bufferSize;

            set
            {
                if (bufferSize < 512)
                {
                    throw new NotSupportedException($"[{nameof(BufferSize)}={bufferSize}] is not supported.  Buffers must be at least 512 bytes.");
                }

                bufferSize = value;
            }
        }
    }
}
